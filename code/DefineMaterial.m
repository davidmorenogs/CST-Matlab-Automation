% Copyright (C) David Moreno Gallego de la Sacristana, 2023
% david.moreno.gs@gmail.com
% -----------------------------------------------------------
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to use
% the Software for non-commercial purposes only. Any distribution of the
% Software or modifications thereof is strictly prohibited without written
% consent from the author.
% 
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% 
% For commercial use or distribution, please contact the author.

function [] = DefineMaterial(name,eps,mu,tand,col,trans)
global mws;
mws.invoke('AddToHistory', ['define material ', name],[...
sprintf('With Material\n') ...
sprintf('  .Reset\n') ...
sprintf(['  .Name "', name '"\n']) ...
sprintf(['  .Folder ""\n']) ...
sprintf(['  .FrqType "all"\n']) ...
sprintf(['  .Type "Normal"\n']) ...
sprintf(['  .MaterialUnit "Frequency", "GHz"\n']) ...
sprintf(['  .MaterialUnit "Geometry", "mm"\n']) ...
sprintf(['  .MaterialUnit "Time", "ns"\n']) ...
sprintf(['  .MaterialUnit "Temperature", "Kelvin"\n']) ...
sprintf(['  .Epsilon "', num2str(eps) '"\n']) ...
sprintf(['  .Mue "', num2str(mu) '"\n']) ...
sprintf(['  .Sigma "0"\n']) ...
sprintf(['  .TanD "', num2str(tand) '"\n']) ...
sprintf(['  .TanDFreq "0"\n']) ...
sprintf(['  .TanDGiven "False"\n']) ...
sprintf(['  .TanDModel "ConstTanD"\n']) ...
sprintf(['  .EnableUserConstTanDModelOrderEps "False"\n']) ...
sprintf(['  .ConstTanDModelOrderEps "1"\n']) ...
sprintf(['  .SetElParametricConductivity "False"\n']) ...
sprintf(['  .ReferenceCoordSystem "Global"\n']) ...
sprintf(['  .CoordSystemType "Cartesian"\n']) ...
sprintf(['  .SigmaM "0"\n']) ...
sprintf(['  .TanDM "0.0"\n']) ...
sprintf(['  .TanDMFreq "0"\n']) ...
sprintf(['  .TanDMGiven "False"\n']) ...
sprintf(['  .TanDMModel "ConstTanD"\n']) ...
sprintf(['  .EnableUserConstTanDModelOrderMue "False"\n']) ...
sprintf(['  .ConstTanDModelOrderMue "1"\n']) ...
sprintf(['  .SetMagParametricConductivity "False"\n']) ...
sprintf(['  .DispModelEps  "None"\n']) ...
sprintf(['  .DispModelMue  "None"\n']) ...
sprintf(['  .DispersiveFittingSchemeEps "Nth Order"\n']) ...
sprintf(['  .MaximalOrderNthModelFitEps "10"\n']) ...
sprintf(['  .ErrorLimitNthModelFitEps "0.1"\n']) ...
sprintf(['  .UseOnlyDataInSimFreqRangeNthModelEps "False"\n']) ...
sprintf(['  .DispersiveFittingSchemeMue "Nth Order"\n']) ...
sprintf(['  .MaximalOrderNthModelFitMue "10"\n']) ...
sprintf(['  .ErrorLimitNthModelFitMue "0.1"\n']) ...
sprintf(['  .UseOnlyDataInSimFreqRangeNthModelMue "False"\n']) ...
sprintf(['  .UseGeneralDispersionEps "False"\n']) ...
sprintf(['  .UseGeneralDispersionMue "False"\n']) ...
sprintf(['  .NLAnisotropy "False"\n']) ...
sprintf(['  .NLAStackingFactor "1"\n']) ...
sprintf(['  .NLADirectionX "1"\n']) ...
sprintf(['  .NLADirectionY "0"\n']) ...
sprintf(['  .NLADirectionZ "0"\n']) ...
sprintf(['  .Rho "0"\n']) ...
sprintf(['  .ThermalType "Normal"\n']) ...
sprintf(['  .ThermalConductivity "0"\n']) ...
sprintf(['  .HeatCapacity "0"\n']) ...
sprintf(['  .DynamicViscosity "0"\n']) ...
sprintf(['  .MetabolicRate "0"\n']) ...
sprintf(['  .BloodFlow "0"\n']) ...
sprintf(['  .VoxelConvection "0"\n']) ...
sprintf(['  .MechanicsType "Unused"\n']) ...
sprintf(['  .Colour "', num2str(col(1)) '", "', num2str(col(2)) '", "', num2str(col(3)) '" \n']) ...
sprintf(['  .Wireframe "False"\n']) ...
sprintf(['  .Reflection "False"\n']) ...
sprintf(['  .Allowoutline "True"\n']) ...
sprintf(['  .Transparentoutline "False" \n']) ...
sprintf(['  .Transparency "', num2str(trans) '"\n']) ...
sprintf(' .Create\n') ...
sprintf('End With')]);
end

